@page "/todolist"
@using Newtonsoft.Json
@using System.Net
@inject HttpClient Http
@inject PreloadService PreloadService


<Toasts class="p-3" Messages="messages" Placement="ToastsPlacement.TopRight" />


@if (_todos == null)
{
    <div>
        <p style="text-align:center;font-size: 40px"><em>Şuanlık Görevler Boş</em></p>
    </div>
}
else
{

    <h3>Yapılacak Görevlerim</h3>
    @foreach (var todo in _todos)
    {
        <BSCard CardType="CardType.Card" style="width: 14;">
            <BSCard CardType="CardType.Body">
                <BSCard CardType="CardType.Title" style="font-weight:bold">@todo.Id</BSCard>
                @if (!todo.Completed)
                {
                    <BSCard CardType="CardType.Text">
                        @todo.Title
                    </BSCard>
                }
                else
                {
                    <BSCard CardType="CardType.Text" style="text-decoration: line-through;">
                        @todo.Title
                    </BSCard>
                }
                @if (!todo.Completed)
                {
                    <BSButton @onclick="()=>MakeIsComplete(todo.Id)" Color="BSColor.Success">Tamamlandı İşaretle</BSButton>
                }
                <BSButton @onclick="()=>DeleteItem(todo.Id)" Color="BSColor.Danger">Görevi sil</BSButton>
            </BSCard>
        </BSCard>
    }
}


@code {
    private List<Todo>? _todos;

    protected override async Task OnInitializedAsync()
    {
        string stringResult = "";
        PreloadService.Show(SpinnerColor.Light, "Ürünler Getiriliyor...");

        try
        {
            stringResult = await Http.GetStringAsync("getalltodo");
        }
        catch (Exception exception)
        {
            ShowMessage(ToastType.Warning, "Server Hatası", "Yazılan URL de yada server da bir hata mevcut");
            throw;
        }
        finally
        {
            PreloadService.Hide();
        }


        _todos = JsonConvert.DeserializeObject<List<Todo>>(stringResult);
    }

    public async Task MakeIsComplete(int todoId)
    {
        PreloadService.Show(SpinnerColor.Light,"Tamalanıyor...");
        var responseMessage = await Http.GetAsync($"update/{todoId}");
        PreloadService.Hide();
        if (responseMessage.StatusCode == HttpStatusCode.OK)
        {
            var todo = _todos.SingleOrDefault(t => t.Id == todoId);
            todo.Completed = true;
            StateHasChanged();
        }
        ShowMessage(responseMessage.IsSuccessStatusCode ? ToastType.Success : ToastType.Danger, "Görev Tamalama İşlemi", $"{await responseMessage.Content.ReadAsStringAsync()} (Tamamlandı Olarak İşaretlendi)");
    }

    public async Task DeleteItem(int todoId)
    {
        PreloadService.Show(SpinnerColor.Light, "Siliniyor...");
        var responseMessage = await Http.DeleteAsync($"delete/{todoId}");
        PreloadService.Hide();
        if (responseMessage.StatusCode == HttpStatusCode.OK)
        {
            var todo = _todos.SingleOrDefault(t => t.Id == todoId);
            _todos.Remove(todo);
            StateHasChanged();
        }
        ShowMessage(responseMessage.IsSuccessStatusCode ? ToastType.Success : ToastType.Danger, "Görev Silme İşlemi", await responseMessage.Content.ReadAsStringAsync());

    }

    List<ToastMessage> messages = new List<ToastMessage>();

    private void ShowMessage(ToastType toastType, string title, string responseMessage) => messages.Add(CreateToastMessage(toastType, title, responseMessage));

    private ToastMessage CreateToastMessage(ToastType toastType, string title, string responseMessage)
        => new ToastMessage
        {
            Type = toastType,
            Title = title,
            HelpText = $"{DateTime.Now}",
            Message = responseMessage
        };
}
